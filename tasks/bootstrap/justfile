# DEPRECATED: Part-based compilation system replaced by config-driven approach
# The new system uses bootstrap/configure.sh + bootstrap/termux.sh
# These recipes are kept for reference only

set fallback := true
set shell := ["bash", "-uc"]
set ignore-comments

[no-cd]
build:
  #!/usr/bin/env bash
  set -euo pipefail

  for config_file in src/bootstrap/*.json; do
    if [ -f "$config_file" ]; then
      config_name=$(basename "$config_file" .json)
      just bootstrap build-one "$config_name"
    fi
  done

[no-cd]
build-one config_name:
  #!/usr/bin/env bash
  set -euo pipefail

  config_file="src/bootstrap/{{config_name}}.json"
  output_file="bootstrap/{{config_name}}.sh"

  if [ ! -f "$config_file" ]; then
    echo "Error: Config file $config_file not found"
    exit 1
  fi

  # Start with shebang and header
  cat tasks/bootstrap/header.sh > "$output_file"

  # Read parts from json using jq
  while IFS= read -r part; do
    part_file="src/parts/${part}.sh"

    if [ ! -f "$part_file" ]; then
      echo "Error: Part file $part_file not found"
      exit 1
    fi

    echo "" >> "$output_file"
    echo "#--- ${part} ---#" >> "$output_file"
    echo "" >> "$output_file"
    cat "$part_file" >> "$output_file"
    echo "" >> "$output_file"
    echo "#--- /${part} ---#" >> "$output_file"
    echo "" >> "$output_file"
  done < <(jq -r ".parts[]" "$config_file")

  chmod +x "$output_file"
  echo "Bootstrap script built: $output_file"
